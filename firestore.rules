// firestore.rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /** Helpers **/
    function isGoogleVerified() {
      return request.auth != null
        && request.auth.token.firebase.sign_in_provider == 'google.com'
        && request.auth.token.email_verified == true;
    }

    // Emails are stored LOWERCASE as doc IDs in /adminEmails/{email}
    function isAdmin() {
      return isGoogleVerified()
        && exists(/databases/$(database)/documents/adminEmails/$(request.auth.token.email));
    }

    /** PRIVATE queue: full record incl. phone/email/notify (admins only) */
    match /queue_entries/{id} {
      // Public form may CREATE the full record with strict schema
      allow create: if
        request.resource.data.keys().hasOnly([
          'name','notify','phone','email','status','createdAt'
        ]) &&
        request.resource.data.name is string &&
        request.resource.data.name.size() > 0 &&
        (request.resource.data.notify in ['sms','email','both']) &&
        (request.resource.data.phone == null || request.resource.data.phone is string) &&
        (request.resource.data.email == null || request.resource.data.email is string) &&
        request.resource.data.status == 'waiting' &&
        request.resource.data.createdAt == request.time;

      // Only admins can read/update/delete sensitive docs
      allow read, update, delete: if isAdmin();
    }

    /** PUBLIC mirror: safe fields only (name/status/createdAt) */
    match /queue_public/{id} {
      // Public form (or backend) mirrors a minimal record
      allow create: if
        request.resource.data.keys().hasOnly(['name','status','createdAt']) &&
        request.resource.data.name is string &&
        request.resource.data.name.size() > 0 &&
        (request.resource.data.status in ['waiting','return','served']) &&
        request.resource.data.createdAt == request.time;

      // Anyone can read names/status (no auth required)
      allow read: if true;

      // Only admins can mutate these mirrors (serve/return/remove)
      allow update, delete: if isAdmin();
    }

    /** Admin whitelist roster */
    match /adminEmails/{email} {
      // Allow a signed-in user to check their own admin doc; no listing
      allow get: if isGoogleVerified() && request.auth.token.email == email;
      allow list: if false;

      // Manage via console/secure backend; deny client writes
      allow create, update, delete: if false;
    }

    /** Deny everything else */
    match /{document=**} {
      allow read, write: if false;
    }
  }
}